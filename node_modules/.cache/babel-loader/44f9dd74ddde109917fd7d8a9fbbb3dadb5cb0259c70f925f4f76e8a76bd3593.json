{"ast":null,"code":"var _jsxFileName = \"/Users/spicyb/Desktop/SpotifyDeploy/src/components/SongSearch/SongSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Loader from \"../../utils/Loader\";\nimport SongDetails from './SongDetails';\nimport SongForm from './SongForm';\n// import {helpFetch} from \"../../helpers/helpFetch.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SongSearch = () => {\n  _s();\n  const clientID = \"0a5a810744fa4b2291120b509d465eab\";\n  const clientSecret = \"5de42875ad424214b549d811552aa2b6\";\n  const [search, setSearch] = useState({});\n  const [lyrics, setLyrics] = useState({});\n  const [accessToken, setAccessToken] = useState(\"\"); //Spotify nos pide un  token para poder usar la API.\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    //Obtenemos el token\n    let authParam = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: `grant_type=client_credentials&client_id=${clientID}&client_secret=${clientSecret}`\n    };\n\n    //No podemos usar el helpFetch porque tenemos al body con JSON.stringify, aca no lo necesitamos.\n    fetch(\"https://accounts.spotify.com/api/token\", authParam).then(obj => obj.ok ? obj.json() : Promise.reject(obj)).then(json => setAccessToken(json.access_token)).catch(err => console.log(err));\n  }, []);\n\n  //Para obtener la info de un artista, Spotify nos pide el ID, por eso primero hacemos una peticion para obtener el ID y despues otra para obtener la info de el artista. Lo mismo con la cancion. \n  const getArtistAndLyrics = async (artist, song) => {\n    setLoading(true);\n    setSearch({});\n    setLyrics({});\n    //RTIST\n    let artParam = {\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    let ID;\n    let artistID = await fetch(`https://api.spotify.com/v1/search?q=${artist}&type=artist`, artParam).then(res => res.ok ? res.json() : Promise.reject(res)).then(json => ID = json.artists.items[0].id).catch(err => setSearch({\n      name: \"Artist Not Found\"\n    }));\n    if (ID) {\n      let info;\n      let artistInfo = await fetch(`https://api.spotify.com/v1/artists/${ID}`, artParam).then(res => res.ok ? res.json() : Promise.reject(res)).then(json => info = json).catch(err => console.log(err));\n      setSearch(info);\n\n      //LYRICS\n      let songID = [];\n      let songInfo = await fetch(`https://api.spotify.com/v1/search?q=${song}&type=track`, artParam).then(res => res.ok ? res.json() : Promise.reject(res)).then(json => json.tracks.items.filter(el => {\n        if (el.artists[0].id === ID && songID.length < 1) {\n          songID.push(el.id);\n        }\n        ;\n      })).catch(err => songID = []);\n      if (songID) {\n        let songInfo = await fetch(`https://api.spotify.com/v1/tracks/${songID[0]}`, artParam).then(res => res.ok ? res.json() : Promise.reject(res)).then(json => setLyrics(json)).catch(err => setLyrics({\n          name: \"No Song Found\"\n        }));\n      }\n    }\n    ;\n    setLoading(false);\n  }; //FIN GETARTISTANDLYRICS\n\n  const resetUI = () => {\n    setSearch({});\n    setLyrics({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song-search-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-search-title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"MGF Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(SongForm, {\n      getArtistAndLyrics: getArtistAndLyrics,\n      resetUI: resetUI\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(SongDetails, {\n      search: search,\n      lyrics: lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(SongSearch, \"IQy3odly7PRA4gzyeHv2q+aC0ZA=\");\n_c = SongSearch;\nexport default SongSearch;\n\n// helpFetch().get(artistURL)\n//         .then(res => {\n//             if(!res.artists){\n//                 setSearch({error: \"No se encontro el Artista\"})\n//                 setBio({});\n//                 setLoading(false);\n//             }else if(res.artists){\n//                 setSearch({name: res.artists[0].strArtist, logo: res.artists[0].strArtistThumb})\n//                 setBio({bio: res.artists[0].strBiographyEN});\n//                 setLoading(false);\n//             }\n\n// const getArtistAndLyrics = async (artist, song) =>{\n//     let artistURL;\n//     let lyricsURL;\n//     setLoading(true);\n\n//     const [artistRes, songRes] = await Promise.all([  //Con este await, logramos que el console log y loss set que vienen despues de lass peticiones, esperen a que se realizen las peticiones.\n//         helpFetch().get(artistURL),\n//         helpFetch().get(lyricsURL),\n//     ])\n\n//     console.log(artistRes, songRes);\n//     setSearch(artistRes);\n//     setLyrics(songRes);\n//     setLoading(false);\n// };\nvar _c;\n$RefreshReg$(_c, \"SongSearch\");","map":{"version":3,"names":["React","useState","useEffect","Loader","SongDetails","SongForm","jsxDEV","_jsxDEV","SongSearch","_s","clientID","clientSecret","search","setSearch","lyrics","setLyrics","accessToken","setAccessToken","loading","setLoading","authParam","method","headers","body","fetch","then","obj","ok","json","Promise","reject","access_token","catch","err","console","log","getArtistAndLyrics","artist","song","artParam","ID","artistID","res","artists","items","id","name","info","artistInfo","songID","songInfo","tracks","filter","el","length","push","resetUI","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/spicyb/Desktop/SpotifyDeploy/src/components/SongSearch/SongSearch.js"],"sourcesContent":["import React,{useState, useEffect} from 'react';\nimport Loader from \"../../utils/Loader\"\nimport SongDetails from './SongDetails';\nimport SongForm from './SongForm';\n// import {helpFetch} from \"../../helpers/helpFetch.js\";\n\nconst SongSearch = () => {\n    const clientID = \"0a5a810744fa4b2291120b509d465eab\";\n    const clientSecret = \"5de42875ad424214b549d811552aa2b6\";\n\n    const [search, setSearch] = useState({});\n    const [lyrics, setLyrics] = useState({});\n    const [accessToken, setAccessToken] = useState(\"\"); //Spotify nos pide un  token para poder usar la API.\n    const [loading, setLoading] = useState(false);\n    \n    useEffect(() => {   //Obtenemos el token\n        let authParam = {\n           method:  \"POST\",\n           headers:{\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n           },\n           body: `grant_type=client_credentials&client_id=${clientID}&client_secret=${clientSecret}`\n        };\n        \n        //No podemos usar el helpFetch porque tenemos al body con JSON.stringify, aca no lo necesitamos.\n        fetch(\"https://accounts.spotify.com/api/token\", authParam)\n        .then(obj => obj.ok ? obj.json() : Promise.reject(obj))\n        .then(json => setAccessToken(json.access_token))\n        .catch(err => console.log(err))\n    \n    }, []);\n\n\n    //Para obtener la info de un artista, Spotify nos pide el ID, por eso primero hacemos una peticion para obtener el ID y despues otra para obtener la info de el artista. Lo mismo con la cancion. \n    const getArtistAndLyrics = async(artist, song) =>{\n        setLoading(true);\n        setSearch({})\n        setLyrics({})\n     //RTIST\n      let artParam = {\n        headers: {\n            \"Authorization\": `Bearer ${accessToken}`,\n            \"Content-Type\": \"application/json\",\n        }\n    };\n      let ID;\n      let artistID = await fetch(`https://api.spotify.com/v1/search?q=${artist}&type=artist`, artParam)\n      .then(res => res.ok? res.json() : Promise.reject(res))\n      .then(json => ID = json.artists.items[0].id)\n      .catch(err => setSearch({name: \"Artist Not Found\"}));\n      \n      if(ID){\n      let info;\n      let artistInfo = await fetch(`https://api.spotify.com/v1/artists/${ID}`, artParam)\n      .then(res=> res.ok ? res.json() : Promise.reject(res))\n      .then(json => info = json)\n      .catch(err => console.log(err));\n\n      setSearch(info);\n\n      //LYRICS\n      let songID = [];\n      let songInfo = await fetch(`https://api.spotify.com/v1/search?q=${song}&type=track`, artParam)\n      .then(res => res.ok ? res.json() : Promise.reject(res))\n      .then(json => json.tracks.items.filter(el => {\n        if(el.artists[0].id === ID && songID.length < 1){\n            songID.push(el.id);\n        };\n      }\n      ))\n      .catch(err=> songID=[])\n      \n      if(songID){\n        let songInfo = await fetch(`https://api.spotify.com/v1/tracks/${songID[0]}`, artParam)\n        .then(res => res.ok ? res.json() : Promise.reject(res))\n        .then(json =>setLyrics(json))\n        .catch(err => setLyrics({name: \"No Song Found\"}));\n      }\n          \n    };\n      \n      setLoading(false);\n};//FIN GETARTISTANDLYRICS\n         \n    \n    const resetUI = () =>{\n        setSearch({});\n        setLyrics({});\n    }\n\n    return ( \n        <div className='song-search-wrapper'>\n          <div className='song-search-title'>\n            <h2>MGF Spotify</h2>\n          </div>\n\n            <SongForm getArtistAndLyrics={getArtistAndLyrics} resetUI={resetUI}/>\n            {loading && <Loader/>}\n            <SongDetails search={search} lyrics={lyrics}/>\n          \n        </div>\n     );\n}\n \nexport default SongSearch;\n\n\n\n// helpFetch().get(artistURL)\n//         .then(res => {\n//             if(!res.artists){\n//                 setSearch({error: \"No se encontro el Artista\"})\n//                 setBio({});\n//                 setLoading(false);\n//             }else if(res.artists){\n//                 setSearch({name: res.artists[0].strArtist, logo: res.artists[0].strArtistThumb})\n//                 setBio({bio: res.artists[0].strBiographyEN});\n//                 setLoading(false);\n//             }\n\n\n// const getArtistAndLyrics = async (artist, song) =>{\n//     let artistURL;\n//     let lyricsURL;\n//     setLoading(true);\n\n//     const [artistRes, songRes] = await Promise.all([  //Con este await, logramos que el console log y loss set que vienen despues de lass peticiones, esperen a que se realizen las peticiones.\n//         helpFetch().get(artistURL),\n//         helpFetch().get(lyricsURL),\n//     ])\n    \n//     console.log(artistRes, songRes);\n//     setSearch(artistRes);\n//     setLyrics(songRes);\n//     setLoading(false);\n// };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}